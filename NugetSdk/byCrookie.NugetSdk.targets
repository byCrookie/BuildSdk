<Project>

    <!-- ===================================
    Version
    ==================================== -->
    
    <PropertyGroup>
        <LocalPrereleaseVersionPath>.buildsdk.prerelease.version</LocalPrereleaseVersionPath>
    </PropertyGroup>

    <Target Name="ReadLocalPrereleaseVersion" BeforeTargets="BeforeBuild;BeforeRebuild;Pack" Condition="'$(Configuration)' == 'Debug'">

        <ReadLinesFromFile File="$(LocalPrereleaseVersionPath)">
            <Output TaskParameter="Lines" PropertyName="PrereleaseNumber"/>
        </ReadLinesFromFile>

        <CreateProperty Value="0" Condition="'$(PrereleaseNumber)' == ''">
            <Output TaskParameter="Value" PropertyName="PrereleaseNumber"/>
        </CreateProperty>

        <Message Text="Last PrereleaseNumber -> $(PrereleaseNumber)" Importance="high"/>

        <CreateProperty Value="$([MSBuild]::Add($(PrereleaseNumber), 1))">
            <Output TaskParameter="Value" PropertyName="PrereleaseNumber"/>
        </CreateProperty>

        <Message Text="Current PrereleaseNumber -> $(PrereleaseNumber)" Importance="high"/>
    </Target>

    <Target Name="WriteLocalPrereleaseVersion" AfterTargets="ReadLocalPrereleaseVersion" Condition="'$(Configuration)' == 'Debug'">
        <WriteLinesToFile File="$(LocalPrereleaseVersionPath)" Lines="$(PrereleaseNumber)" Overwrite="true"/>
        <Message Text="Save Current PrereleaseNumber -> $(PrereleaseNumber)" Importance="high"/>
    </Target>

    <Target Name="SetVersions" AfterTargets="WriteLocalPrereleaseVersion">
        <CreateProperty Value="1" Condition="'$(MajorVersion)' == ''">
            <Output TaskParameter="Value" PropertyName="MajorVersion"/>
        </CreateProperty>
        <CreateProperty Value="0" Condition="'$(MinorVersion)' == ''">
            <Output TaskParameter="Value" PropertyName="MinorVersion"/>
        </CreateProperty>
        <CreateProperty Value="0" Condition="'$(PatchVersion)' == ''">
            <Output TaskParameter="Value" PropertyName="PatchVersion"/>
        </CreateProperty>

        <CreateProperty Value="$([MSBuild]::Add($(PatchVersion), 1))" Condition="'$(Configuration)' == 'Debug'">
            <Output TaskParameter="Value" PropertyName="PatchVersion"/>
        </CreateProperty>

        <CreateProperty Value="$(MajorVersion).$(MinorVersion).$(PatchVersion)" Condition="'$(Configuration)' == 'Debug'">
            <Output TaskParameter="Value" PropertyName="VersionPrefix"/>
        </CreateProperty>
        <CreateProperty Value="$(MajorVersion).$(MinorVersion).$(PatchVersion)" Condition="'$(Configuration)' == 'Release'">
            <Output TaskParameter="Value" PropertyName="VersionPrefix"/>
        </CreateProperty>

        <CreateProperty Value="pre-$([System.DateTime]::Now.ToString(yyyy))$([System.DateTime]::Now.ToString(MMddhh))$([System.DateTime]::Now.ToString(mm))-$(PrereleaseNumber)" Condition="'$(VersionSuffix)' == ''">
            <Output TaskParameter="Value" PropertyName="VersionSuffix"/>
        </CreateProperty>

        <CreateProperty Value="$(VersionPrefix)-$(VersionSuffix)" Condition="'$(Configuration)' == 'Debug'">
            <Output TaskParameter="Value" PropertyName="PackageVersion"/>
        </CreateProperty>
        <CreateProperty Value="$(VersionPrefix)" Condition="'$(Configuration)' == 'Release'">
            <Output TaskParameter="Value" PropertyName="PackageVersion"/>
        </CreateProperty>
    </Target>

    <Target Name="LogVersion" AfterTargets="SetVersions">
        <Message Text="'$(MSBuildProjectName)' -> PackageVersion: '$(PackageVersion)'" Importance="high"/>
    </Target>

    <!-- ===================================
    Nuget Package
    ==================================== -->

    <PropertyGroup>
        <PublishPackage Condition="'$(PublishPackage)' == ''">true</PublishPackage>
        <NuGetExeVersion Condition="'$(NuGetExeVersion)' == ''">6.0.0</NuGetExeVersion>
        <NuGetExePath Condition="'$(NuGetExePath)' == ''">$(UserProfile)\.nuget\$(NuGetExeVersion)\</NuGetExePath>
        <NuGetPublishCmd Condition="'$(PackagePublishType)' != 'remote'">add</NuGetPublishCmd>
        <NuGetPublishCmd Condition="'$(PackagePublishType)' == 'remote'">push</NuGetPublishCmd>
        <PackagePublishLocation Condition="'$(PackagePublishType)' != 'remote'">$(PackagePublishLocalLocation)</PackagePublishLocation>
        <PackagePublishLocation Condition="'$(PackagePublishType)' == 'remote'">$(PackagePublishRemoteLocation)</PackagePublishLocation>
    </PropertyGroup>

    <PropertyGroup>
        <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
    </PropertyGroup>

    <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
        <ItemGroup>
            <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))"/>
        </ItemGroup>
    </Target>

    <Target Name="PublishPack" AfterTargets="Pack" Condition="'$(PublishPackage)' == 'true'">
        <DownloadFile Condition="!Exists('$(NuGetExePath)nuget.exe') AND '$(PackagePublishLocation)' != ''" SourceUrl="https://dist.nuget.org/win-x86-commandline/v$(NuGetExeVersion)/nuget.exe" DestinationFolder="$(NuGetExePath)"/>
        <Exec Command="&quot;$(NuGetExePath)nuget.exe&quot; $(NuGetPublishCmd) &quot;$(PackageOutputAbsolutePath)$(PackageId).$(PackageVersion).nupkg&quot; -Source &quot;$(PackagePublishLocation.TrimEnd('\'))&quot;" Condition="'$(PackagePublishLocation)' != ''"/>
        <Warning Text="Skipping NuGet publish, PackagePublishLocation is not set in project file." Condition="'$(PackagePublishLocation)' == ''"/>
    </Target>

</Project>